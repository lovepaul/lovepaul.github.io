<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>中间件——日志平台</title>
    <link href="/2023/03/03/qleyofzi4m3x6y6n/"/>
    <url>/2023/03/03/qleyofzi4m3x6y6n/</url>
    
    <content type="html"><![CDATA[<h2 id="1、项目背景"><a href="#1、项目背景" class="headerlink" title="1、项目背景"></a>1、项目背景</h2><blockquote><p>上一家离开的公司，使用的技术是 springcloud 的技术，日志是分散在各处的。当时的技术经理，让我搭建一套属于公司自己的日志系统，我做了相应了调研。<br>有了以下的几个方案。</p></blockquote><ul><li>阿里日志系统，自带，可集成</li><li>开源的框架 Plumelog</li><li>传统的 ELK</li></ul><h2 id="2、方案分析"><a href="#2、方案分析" class="headerlink" title="2、方案分析"></a>2、方案分析</h2><blockquote><p>分析以上的框架和成本，最终决定用 plumelog 日志做就够用</p></blockquote><ul><li>每天线上的日志没有那么多，仅仅在商品大卖的时候日志多了些</li><li>ELK 需要再次学习的成本还是有的，而且需要的成本比较大</li><li>阿里的最方便，基本集成就可以了，但是有相关的费用</li></ul><h2 id="3、关键事项"><a href="#3、关键事项" class="headerlink" title="3、关键事项"></a>3、关键事项</h2><blockquote><p>为达成上述目标，需要完成哪些关键事项。</p></blockquote><ul><li>学习 PlumeLog 开源框架：</li><li>搭建 ES 服务</li><li>搭建对应的 springboot 服务</li></ul><h2 id="4、Plumelog-的日志架构图"><a href="#4、Plumelog-的日志架构图" class="headerlink" title="4、Plumelog 的日志架构图"></a>4、Plumelog 的日志架构图</h2><p><img src="https://lensman-oss.oss-cn-shanghai.aliyuncs.com/blog-images/FvMke_5TJii6OPccmDlSpw8QYJQM.jpeg"></p><h2 id="5、搭建-PlumeLog-的服务"><a href="#5、搭建-PlumeLog-的服务" class="headerlink" title="5、搭建 PlumeLog 的服务"></a>5、搭建 PlumeLog 的服务</h2><ol><li><strong>首先搭建对应的 docker 和 docker-compose 的运行环境</strong><ul><li>参考本知识库中的：<a href="https://www.yuque.com/lensman/msrly3/uq7l3qt11popnbhl">Docker&amp;Compose——安装</a></li></ul></li><li><strong>上传脚本到文件里面</strong><ul><li>sh 脚本命令：<a href="https://www.yuque.com/attachments/yuque/0/2023/sh/3009901/1677846821322-fa235815-23a2-4f9f-90b8-a589f1c215bd.sh?_lake_card=%7B%22src%22:%22https://www.yuque.com/attachments/yuque/0/2023/sh/3009901/1677846821322-fa235815-23a2-4f9f-90b8-a589f1c215bd.sh%22,%22name%22:%22init-data.sh%22,%22size%22:109,%22ext%22:%22sh%22,%22source%22:%22%22,%22status%22:%22done%22,%22download%22:true,%22taskId%22:%22ucd2598b3-6979-4028-be85-8400a392e4b%22,%22taskType%22:%22upload%22,%22type%22:%22text/x-sh%22,%22__spacing%22:%22both%22,%22mode%22:%22title%22,%22id%22:%22uc4b00657%22,%22margin%22:%7B%22top%22:true,%22bottom%22:true%7D,%22card%22:%22file%22%7D">init-data.sh</a></li><li>docker-compose 脚本命令：<a href="https://www.yuque.com/attachments/yuque/0/2023/yml/3009901/1677897769475-b426202e-7df2-4d08-aa63-de59ba3013bd.yml?_lake_card=%7B%22src%22:%22https://www.yuque.com/attachments/yuque/0/2023/yml/3009901/1677897769475-b426202e-7df2-4d08-aa63-de59ba3013bd.yml%22,%22name%22:%22docker-compose.yml%22,%22size%22:1548,%22ext%22:%22yml%22,%22source%22:%22%22,%22status%22:%22done%22,%22download%22:true,%22taskId%22:%22ue9269e0d-6e4e-44fc-a24b-2594ea7c569%22,%22taskType%22:%22upload%22,%22type%22:%22%22,%22__spacing%22:%22both%22,%22id%22:%22u50e7b25a%22,%22margin%22:%7B%22top%22:true,%22bottom%22:true%7D,%22card%22:%22file%22%7D">docker-compose.yml</a></li></ul></li></ol><div class="code-wrapper"><pre><code class="hljs shell">chmod -R 777 init-data.sh./init-data.shdocker-compose up -d</code></pre></div><ol start="3"><li><strong>等待运行完毕，校验安装的结果</strong><blockquote><p><em>这里面的地址记得自己换</em></p></blockquote></li></ol><p><img src="https://lensman-oss.oss-cn-shanghai.aliyuncs.com/blog-images/Fnv4IhF5AfX4DvuhiHC_eBj-4AAJ.png"></p><h2 id="6、搭建客户端"><a href="#6、搭建客户端" class="headerlink" title="6、搭建客户端"></a>6、搭建客户端</h2><ul><li>可以使用已经运行好的服务：<a href="https://gitee.com/lovepaul/open-holiday.git">https://gitee.com/lovepaul/open-holiday.git</a></li><li>也可以新建对应的 springboot 的微服务，如下代码三件套<ol><li> pom 文件</li></ol></li></ul><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">  <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.yjc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>open-holiday<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>open-holiday<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Demo project for Spring Boot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>de.codecentric<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-admin-starter-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.codehaus.janino<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>janino<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.codehaus.janino/commons-compiler --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.codehaus.janino<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-compiler<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.hutool<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hutool-all<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.6.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-comment">&lt;!--分布式日志收集plumelog--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.plumelog<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>plumelog-logback<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.plumelog<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>plumelog-trace<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.11.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.hutool<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hutool-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.5.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">finalName</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre></div><ol start="2"><li> properties</li></ol><div class="code-wrapper"><pre><code class="hljs shell">server.port=8083spring.application.name=open-holidayspring.redis.host=124.223.101.204spring.redis.password=521521plumelog.appName=$&#123;spring.application.name&#125;plumelog.redisHost=$&#123;spring.redis.host&#125;plumelog.redisAuth=$&#123;spring.redis.password&#125;spring.profiles.active=dev</code></pre></div><ol start="3"><li> logback-spring.xml 文件</li></ol><div class="code-wrapper"><pre><code class="hljs shell">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;configuration debug=&quot;false&quot;&gt;    &lt;conversionRule conversionWord=&quot;clr&quot; converterClass=&quot;org.springframework.boot.logging.logback.ColorConverter&quot;/&gt;    &lt;conversionRule conversionWord=&quot;wex&quot;                    converterClass=&quot;org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter&quot;/&gt;    &lt;conversionRule conversionWord=&quot;wEx&quot;                    converterClass=&quot;org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter&quot;/&gt;    &lt;!-- 增加如下的TLog MDC Listener --&gt;    &lt;!-- 彩色日志格式 --&gt;    &lt;property name=&quot;CONSOLE_LOG_PATTERN&quot;              value=&quot;$&#123;CONSOLE_LOG_PATTERN:-%clr(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;)&#123;faint&#125; %clr($&#123;LOG_LEVEL_PATTERN:-%5p&#125;) %clr($&#123;PID:- &#125;)&#123;magenta&#125; %clr(---)&#123;faint&#125; %clr([%15.15t])&#123;faint&#125; %clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125; %clr(:)&#123;faint&#125;  %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;&quot;/&gt;    &lt;!--输出到控制台--&gt;    &lt;appender name=&quot;CONSOLE&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;        &lt;filter class=&quot;com.plumelog.logback.util.FilterSyncLogger&quot;&gt;            &lt;level&gt;info&lt;/level&gt;            &lt;filterPackage&gt;com.plumelog.trace.aspect.AbstractAspect&lt;/filterPackage&gt;        &lt;/filter&gt;        &lt;encoder &gt;            &lt;Pattern&gt;$&#123;CONSOLE_LOG_PATTERN&#125;&lt;/Pattern&gt;            &lt;!-- 设置字符集 --&gt;            &lt;charset&gt;UTF-8&lt;/charset&gt;        &lt;/encoder&gt;    &lt;/appender&gt;    &lt;!-- 输出到文件 --&gt;    &lt;appender name=&quot;file&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;            &lt;FileNamePattern&gt;logs/$&#123;plumelog.appName&#125;.log.%d&#123;yyyy-MM-dd&#125;.log&lt;/FileNamePattern&gt;            &lt;MaxHistory&gt;3&lt;/MaxHistory&gt;        &lt;/rollingPolicy&gt;        &lt;encoder &gt;            &lt;Pattern&gt;$&#123;CONSOLE_LOG_PATTERN&#125;&lt;/Pattern&gt;            &lt;!-- 设置字符集 --&gt;            &lt;charset&gt;UTF-8&lt;/charset&gt;        &lt;/encoder&gt;    &lt;/appender&gt;    &lt;!-- 环境配置 --&gt;    &lt;springProperty scope=&quot;context&quot; name=&quot;plumelog.appName&quot; source=&quot;plumelog.appName&quot;/&gt;    &lt;springProperty scope=&quot;context&quot; name=&quot;plumelog.redisHost&quot; source=&quot;plumelog.redisHost&quot;/&gt;    &lt;springProperty scope=&quot;context&quot; name=&quot;plumelog.redisPort&quot; source=&quot;plumelog.redisPort&quot;/&gt;    &lt;springProperty scope=&quot;context&quot; name=&quot;plumelog.redisAuth&quot; source=&quot;plumelog.redisAuth&quot;/&gt;    &lt;springProperty scope=&quot;context&quot; name=&quot;plumelog.redisDb&quot; source=&quot;plumelog.redisDb&quot;/&gt;    &lt;springProperty scope=&quot;context&quot; name=&quot;plumelog.env&quot; source=&quot;spring.profiles.active&quot;/&gt;    &lt;!-- 输出plumelog --&gt;    &lt;appender name=&quot;plumelog&quot; class=&quot;com.plumelog.logback.appender.RedisAppender&quot;&gt;        &lt;appName&gt;$&#123;plumelog.appName&#125;&lt;/appName&gt;        &lt;redisHost&gt;$&#123;plumelog.redisHost&#125;&lt;/redisHost&gt;        &lt;redisAuth&gt;$&#123;plumelog.redisAuth&#125;&lt;/redisAuth&gt;        &lt;redisDb&gt;$&#123;plumelog.redisDb&#125;&lt;/redisDb&gt;        &lt;env&gt;$&#123;plumelog.env&#125;&lt;/env&gt;    &lt;/appender&gt;    &lt;!-- 配置日志输出，只输出info，只保留控制台和plumelog输出--&gt;    &lt;!-- 正常开发环境本地，只输出到控制台，测试环境只输出到plumelog,生产环境输出到本地文件plumelog,因为有plumelog加持本地文件就保留3天即可--&gt;    &lt;!-- 这些都可以根据环境配置不同加载不同的ref-&gt;--&gt;    &lt;root level=&quot;info&quot;&gt;        &lt;!--输出到控制台--&gt;        &lt;appender-ref ref=&quot;CONSOLE&quot;/&gt;        &lt;!-- 输出到文件 --&gt;        &lt;appender-ref ref=&quot;file&quot;/&gt;        &lt;!-- 输出plumelog --&gt;        &lt;appender-ref ref=&quot;plumelog&quot;/&gt;    &lt;/root&gt;&lt;/configuration&gt;</code></pre></div><ol start="4"><li> 几个配置文件，主要是为了配置链路追踪的</li></ol><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yjc.openholiday.config;<span class="hljs-keyword">import</span> com.plumelog.trace.aspect.AbstractAspect;<span class="hljs-keyword">import</span> org.aspectj.lang.JoinPoint;<span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Around;<span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Aspect;<span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<span class="hljs-comment">/**</span><span class="hljs-comment">* 方面配置</span><span class="hljs-comment">*</span><span class="hljs-comment">* <span class="hljs-doctag">@author</span> admin</span><span class="hljs-comment">* <span class="hljs-doctag">@date</span> 2023/03/04</span><span class="hljs-comment">*/</span><span class="hljs-meta">@Aspect</span>    <span class="hljs-meta">@Component</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AspectConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractAspect</span> &#123;        <span class="hljs-comment">/**</span><span class="hljs-comment">* 围绕</span><span class="hljs-comment">*</span><span class="hljs-comment">* <span class="hljs-doctag">@param</span> joinPoint 连接点</span><span class="hljs-comment">* <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> Object&#125;</span><span class="hljs-comment">* <span class="hljs-doctag">@throws</span> Throwable 可丢弃</span><span class="hljs-comment">*/</span><span class="hljs-comment">// 注意这里要替换自己的包地址</span>        <span class="hljs-meta">@Around(&quot;within(com.yjc..*))</span><span class="hljs-string">&quot;)</span><span class="hljs-string">        public Object around(JoinPoint joinPoint) throws Throwable &#123;</span><span class="hljs-string">            return aroundExecute(joinPoint);</span><span class="hljs-string">        &#125;</span><span class="hljs-string">    &#125;</span><span class="hljs-string"></span></code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yjc.openholiday.config;<span class="hljs-keyword">import</span> com.plumelog.core.TraceId;<span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-keyword">import</span> java.util.UUID;<span class="hljs-comment">/**</span><span class="hljs-comment">* 拦截器</span><span class="hljs-comment">*</span><span class="hljs-comment">* <span class="hljs-doctag">@author</span> admin</span><span class="hljs-comment">* <span class="hljs-doctag">@date</span> 2023/03/04</span><span class="hljs-comment">*/</span><span class="hljs-meta">@Component</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Interceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;        <span class="hljs-comment">/**</span><span class="hljs-comment">* 预处理</span><span class="hljs-comment">*</span><span class="hljs-comment">* <span class="hljs-doctag">@param</span> request  要求</span><span class="hljs-comment">* <span class="hljs-doctag">@param</span> response 回答</span><span class="hljs-comment">* <span class="hljs-doctag">@param</span> handler  处理器</span><span class="hljs-comment">* <span class="hljs-doctag">@return</span> boolean</span><span class="hljs-comment">*/</span>        <span class="hljs-meta">@Override</span>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> &#123;            <span class="hljs-comment">//设置TraceID值，不埋此点链路ID就没有</span>            TraceId.logTraceID.set(UUID.randomUUID().toString().replaceAll(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>));            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;        &#125;        <span class="hljs-comment">/**</span><span class="hljs-comment">* 柱状把手</span><span class="hljs-comment">*</span><span class="hljs-comment">* <span class="hljs-doctag">@param</span> request      要求</span><span class="hljs-comment">* <span class="hljs-doctag">@param</span> response     回答</span><span class="hljs-comment">* <span class="hljs-doctag">@param</span> handler      处理器</span><span class="hljs-comment">* <span class="hljs-doctag">@param</span> modelAndView 模型和视图</span><span class="hljs-comment">*/</span>        <span class="hljs-meta">@Override</span>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> &#123;        &#125;        <span class="hljs-comment">/**</span><span class="hljs-comment">* 完工后</span><span class="hljs-comment">*</span><span class="hljs-comment">* <span class="hljs-doctag">@param</span> request  要求</span><span class="hljs-comment">* <span class="hljs-doctag">@param</span> response 回答</span><span class="hljs-comment">* <span class="hljs-doctag">@param</span> handler  处理器</span><span class="hljs-comment">* <span class="hljs-doctag">@param</span> ex       前任</span><span class="hljs-comment">*/</span>        <span class="hljs-meta">@Override</span>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> &#123;        &#125;    &#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yjc.openholiday.config;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;<span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<span class="hljs-comment">/**</span><span class="hljs-comment">* 拦截器配置</span><span class="hljs-comment">*</span><span class="hljs-comment">* <span class="hljs-doctag">@author</span> admin</span><span class="hljs-comment">* <span class="hljs-doctag">@date</span> 2023/03/04</span><span class="hljs-comment">*/</span><span class="hljs-meta">@Configuration</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InterceptorConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;        <span class="hljs-comment">/**</span><span class="hljs-comment">* 添加拦截器</span><span class="hljs-comment">*</span><span class="hljs-comment">* <span class="hljs-doctag">@param</span> registry 注册表</span><span class="hljs-comment">*/</span>        <span class="hljs-meta">@Override</span>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;            <span class="hljs-comment">// 自定义拦截器，添加拦截路径和排除拦截路径</span>            registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Interceptor</span>()).addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>);        &#125;    &#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yjc.openholiday;<span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<span class="hljs-meta">@SpringBootApplication</span>    <span class="hljs-comment">// 注意这个扫描包是开启链路追踪的</span>    <span class="hljs-meta">@ComponentScan(&#123;&quot;com.plumelog&quot;,&quot;com.yjc.openholiday&quot;&#125;)</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OpenHolidayApplication</span> &#123;        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;            SpringApplication.run(OpenHolidayApplication.class, args);        &#125;    &#125;</code></pre></div><ol start="5"><li> 编写对应的 controller 的接口</li></ol><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yjc.openholiday;<span class="hljs-keyword">import</span> cn.hutool.core.date.DateUtil;<span class="hljs-keyword">import</span> cn.hutool.core.util.IdUtil;<span class="hljs-keyword">import</span> cn.hutool.core.util.ObjectUtil;<span class="hljs-keyword">import</span> cn.hutool.core.util.RandomUtil;<span class="hljs-keyword">import</span> cn.hutool.core.util.StrUtil;<span class="hljs-keyword">import</span> cn.hutool.http.HttpRequest;<span class="hljs-keyword">import</span> cn.hutool.http.HttpResponse;<span class="hljs-keyword">import</span> cn.hutool.http.HttpUtil;<span class="hljs-keyword">import</span> cn.hutool.json.JSONObject;<span class="hljs-keyword">import</span> cn.hutool.json.JSONUtil;<span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<span class="hljs-keyword">import</span> java.util.Date;<span class="hljs-keyword">import</span> java.util.Set;<span class="hljs-meta">@Slf4j</span>    <span class="hljs-meta">@RestController</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HolidayController</span> &#123;        <span class="hljs-meta">@GetMapping(&quot;/test&quot;)</span>        <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getCurrentDataIsHoliday</span><span class="hljs-params">()</span> &#123;            <span class="hljs-type">String</span> <span class="hljs-variable">currentYear</span> <span class="hljs-operator">=</span> DateUtil.format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(), <span class="hljs-string">&quot;yyyy&quot;</span>);            <span class="hljs-type">String</span> <span class="hljs-variable">currentDate</span> <span class="hljs-operator">=</span> DateUtil.format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(), <span class="hljs-string">&quot;MM-dd&quot;</span>);            log.info(<span class="hljs-string">&quot;getCurrentDataIsHoliday-&#123;&#125;----&#123;&#125;&quot;</span>, currentYear, currentDate);            <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://timor.tech/api/holiday/year/&quot;</span> + currentYear;            <span class="hljs-type">HttpRequest</span> <span class="hljs-variable">get</span> <span class="hljs-operator">=</span> HttpUtil.createGet(url);            <span class="hljs-type">HttpResponse</span> <span class="hljs-variable">execute</span> <span class="hljs-operator">=</span> get.execute();            <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> execute.body();            <span class="hljs-keyword">if</span> (StrUtil.isNotEmpty(s)) &#123;                <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> JSONUtil.parseObj(s);                <span class="hljs-type">Object</span> <span class="hljs-variable">holiday</span> <span class="hljs-operator">=</span> jsonObject.get(<span class="hljs-string">&quot;holiday&quot;</span>);                <span class="hljs-type">JSONObject</span> <span class="hljs-variable">holidayJsonObj</span> <span class="hljs-operator">=</span> JSONUtil.parseObj(holiday);                Set&lt;String&gt; allHolidayDate = holidayJsonObj.keySet();                log.info(<span class="hljs-string">&quot;getCurrentDataIsHoliday-&#123;&#125;&quot;</span>, allHolidayDate);                <span class="hljs-keyword">if</span> (ObjectUtil.isNotEmpty(allHolidayDate) &amp;&amp; allHolidayDate.contains(currentDate)) &#123;                    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;                &#125; <span class="hljs-keyword">else</span> &#123;                    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;                &#125;            &#125;            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;        &#125;        <span class="hljs-meta">@GetMapping(&quot;/random&quot;)</span>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">random</span><span class="hljs-params">()</span> &#123;            log.info(RandomUtil.randomInt() + <span class="hljs-string">&quot;&quot;</span>);            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;1.0_&quot;</span> + IdUtil.fastSimpleUUID();        &#125;        <span class="hljs-meta">@GetMapping(&quot;/errorlog&quot;)</span>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">errorlog</span><span class="hljs-params">()</span> &#123;            log.info(<span class="hljs-string">&quot;我测一下&quot;</span>);            <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> / <span class="hljs-number">0</span>;            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;1.0_&quot;</span> + IdUtil.fastSimpleUUID();        &#125;        <span class="hljs-meta">@GetMapping(&quot;/test2&quot;)</span>        <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getCurrentDataIsHoliday2</span><span class="hljs-params">()</span> &#123;            <span class="hljs-type">String</span> <span class="hljs-variable">currentYear</span> <span class="hljs-operator">=</span> DateUtil.format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(), <span class="hljs-string">&quot;yyyy&quot;</span>);            <span class="hljs-type">String</span> <span class="hljs-variable">currentDate</span> <span class="hljs-operator">=</span> DateUtil.format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(), <span class="hljs-string">&quot;MM-dd&quot;</span>);            log.info(<span class="hljs-string">&quot;getCurrentDataIsHoliday-&#123;&#125;----&#123;&#125;&quot;</span>, currentYear, currentDate);            <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://timor.tech/api/holiday/year/&quot;</span> + currentYear;            <span class="hljs-type">HttpRequest</span> <span class="hljs-variable">get</span> <span class="hljs-operator">=</span> HttpUtil.createGet(url);            <span class="hljs-type">HttpResponse</span> <span class="hljs-variable">execute</span> <span class="hljs-operator">=</span> get.execute();            <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> execute.body();            <span class="hljs-keyword">if</span> (StrUtil.isNotEmpty(s)) &#123;                <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> JSONUtil.parseObj(s);                <span class="hljs-type">Object</span> <span class="hljs-variable">holiday</span> <span class="hljs-operator">=</span> jsonObject.get(<span class="hljs-string">&quot;holiday&quot;</span>);                <span class="hljs-type">JSONObject</span> <span class="hljs-variable">holidayJsonObj</span> <span class="hljs-operator">=</span> JSONUtil.parseObj(holiday);                Set&lt;String&gt; allHolidayDate = holidayJsonObj.keySet();                log.info(<span class="hljs-string">&quot;getCurrentDataIsHoliday-&#123;&#125;&quot;</span>, allHolidayDate);                <span class="hljs-keyword">if</span> (ObjectUtil.isNotEmpty(allHolidayDate) &amp;&amp; allHolidayDate.contains(currentDate)) &#123;                    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;                        &#125; <span class="hljs-keyword">else</span> &#123;                        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;                        &#125;                        &#125;                        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;                        &#125;                        &#125;</code></pre></div><h2 id="7、检验结果"><a href="#7、检验结果" class="headerlink" title="7、检验结果"></a>7、检验结果</h2><p><img src="https://lensman-oss.oss-cn-shanghai.aliyuncs.com/blog-images/FmvNMTKR5417dVmMEK6YRc7fVP6Q.png"><br><img src="https://lensman-oss.oss-cn-shanghai.aliyuncs.com/blog-images/FvzvNkTRDtZ_8IC3nFdkedsIB6CE.png"><br><img src="https://lensman-oss.oss-cn-shanghai.aliyuncs.com/blog-images/FrOSB6tYoZM2QkXNcZ8wFhaoG65-.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker——Nacos（单机）</title>
    <link href="/2023/03/03/oeaziez1mwb4q3so/"/>
    <url>/2023/03/03/oeaziez1mwb4q3so/</url>
    
    <content type="html"><![CDATA[<h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><blockquote><p>快速启动一个注册中心在本地</p></blockquote><h2 id="单机-Nacos-镜像"><a href="#单机-Nacos-镜像" class="headerlink" title="单机 Nacos 镜像"></a>单机 Nacos 镜像</h2><div class="code-wrapper"><pre><code class="hljs shell">docker run --name nacos-standalone -e MODE=standalone -d -p 8848:8848 -p 9848:9848 -p 9849:9849 nacos/nacos-server:2.0.0</code></pre></div><h2 id="单机-Nacos-镜像-Mysql-启动"><a href="#单机-Nacos-镜像-Mysql-启动" class="headerlink" title="单机 Nacos 镜像-Mysql 启动"></a>单机 Nacos 镜像-Mysql 启动</h2><p><strong>参考：</strong></p><blockquote><p>注意，这里面会用到.env 这个环境变量，记得自己更改一下</p></blockquote><p><a href="https://blog.csdn.net/weixin_42542222/article/details/118354530">nacos 部署 docker-compose + mysql 模式<em>JJH</em>的博客-CSDN 博客</a><br><strong>参考：</strong><br><a href="https://github.com/alibaba/nacos/blob/develop/distribution/conf/mysql-schema.sql">nacos/mysql-schema.sql at develop · alibaba/nacos</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker——Redis（单机）</title>
    <link href="/2023/03/03/wxdfug2q1080b5c8/"/>
    <url>/2023/03/03/wxdfug2q1080b5c8/</url>
    
    <content type="html"><![CDATA[<h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><blockquote><p>跑起来一个单体的 Redis 容器</p></blockquote><h2 id="单机-Redis-镜像"><a href="#单机-Redis-镜像" class="headerlink" title="单机 Redis 镜像"></a>单机 Redis 镜像</h2><div class="code-wrapper"><pre><code class="hljs shell">docker run -itd --name redis -p 6379:6379 redis --requirepass &#x27;521521&#x27;</code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker——Mysql（单机）</title>
    <link href="/2023/03/03/uwuvbm7fcx5ohkt0/"/>
    <url>/2023/03/03/uwuvbm7fcx5ohkt0/</url>
    
    <content type="html"><![CDATA[<h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><blockquote><p>快速跑起来一个 Mysql 的镜像</p></blockquote><h2 id="单机-Mysql-镜像"><a href="#单机-Mysql-镜像" class="headerlink" title="单机 Mysql 镜像"></a>单机 Mysql 镜像</h2><ol><li>5.7 版本</li></ol><div class="code-wrapper"><pre><code class="hljs shell">docker run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=521521 --name mysql -v /app/docker/mysql/my.cnf:/etc/mysql/my.cnf -v /app/docker/mysql/db:/var/lib/mysql mysql:5.7</code></pre></div><ol start="2"><li>8.0 版本</li></ol><div class="code-wrapper"><pre><code class="hljs shell">docker run -it -d --name mysql --net=host -m 500m -v /root/mysql/data:/var/lib/mysql -v /root/mysql/config:/etc/mysql/conf.d  -e MYSQL_ROOT_PASSWORD=abc123456 -e TZ=Asia/Shanghai mysql:8.0.21 --lower_case_table_names=1</code></pre></div><p>还需要进入到容器更改是否可以远程连接</p><div class="code-wrapper"><pre><code class="hljs shell">docker exec -it mysql bash</code></pre></div><p>还需要更改对应用户的链接</p><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">允许远程连接</span>ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;abc123456&#x27;;<span class="hljs-meta prompt_">#</span><span class="language-bash">刷新数据库</span>flush privileges;</code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker基础命令</title>
    <link href="/2023/03/03/ada1oluaseecquo4/"/>
    <url>/2023/03/03/ada1oluaseecquo4/</url>
    
    <content type="html"><![CDATA[<h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><blockquote><p>经常要找一些 Docekr 的基础命令，这里面作一个总结</p></blockquote><h2 id="项目目标"><a href="#项目目标" class="headerlink" title="项目目标"></a>项目目标</h2><blockquote><p>了解&amp;熟悉 Docker 的一些命令</p></blockquote><h2 id="具体细节"><a href="#具体细节" class="headerlink" title="具体细节"></a>具体细节</h2><ol><li>查看当前 docker 有多少镜像</li></ol><div class="code-wrapper"><pre><code class="hljs shell">docker images</code></pre></div><ol start="2"><li>查看当前服务有多少容器</li></ol><div class="code-wrapper"><pre><code class="hljs shell">docker ps -a</code></pre></div><ol start="3"><li>docker 容器启动</li></ol><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">举个例子</span>docker run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=521521 --name mysql -v /app/docker/mysql/my.cnf:/etc/mysql/my.cnf -v /app/docker/mysql/db:/var/lib/mysql mysql:5.7</code></pre></div><ol start="4"><li>进入容器内部</li></ol><div class="code-wrapper"><pre><code class="hljs shell">docker exec -it [xxxx容器] bash</code></pre></div><ol start="5"><li>将宿主机的文件拷贝进入容器</li></ol><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">docker <span class="hljs-built_in">cp</span> 本地文件路径 容器ID/容器NAME:容器内路径</span>docker cp /Users/wuhanxue/Downloads/rabbitmq_delayed_message_exchange-3.9.0.ez 1faca6a70742:/opt/rabbitmq/plugins</code></pre></div><ol start="6"><li>强制移除容器</li></ol><div class="code-wrapper"><pre><code class="hljs shell">docker rm -f [xxxxx容器]</code></pre></div><ol start="7"><li>移除镜像</li></ol><div class="code-wrapper"><pre><code class="hljs shell">docker rmi [xxxxx镜像]</code></pre></div><ol start="8"><li>删除所有未运行的镜像</li></ol><div class="code-wrapper"><pre><code class="hljs shell">sudo docker rm $(sudo docker ps -a -q)</code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker&amp;Compose——安装</title>
    <link href="/2023/03/03/uq7l3qt11popnbhl/"/>
    <url>/2023/03/03/uq7l3qt11popnbhl/</url>
    
    <content type="html"><![CDATA[<h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><blockquote><p>当前每次都要上百度，阿里找对应的命令</p></blockquote><ul><li>换了新的机器就要找一次</li></ul><h2 id="项目目标"><a href="#项目目标" class="headerlink" title="项目目标"></a>项目目标</h2><blockquote><p>一键解决安装 Docker 的问题</p><ol><li>命令持久可用</li><li>全自动</li></ol></blockquote><h2 id="关键事项"><a href="#关键事项" class="headerlink" title="关键事项"></a>关键事项</h2><blockquote><p>Linux 的机器不可以是 ARM 架构的</p></blockquote><ul><li>注意 Linux 的机器的基础架构</li><li>注意 Linux 的网络速度</li></ul><h2 id="具体脚本"><a href="#具体脚本" class="headerlink" title="具体脚本"></a>具体脚本</h2><blockquote><p>下面是两种方式，具体看个人习惯</p></blockquote><p>1、脚本的具体内容可以自己复制出来新建文件</p><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">step 1: 安装必要的一些系统工具</span>sudo yum install -y yum-utils device-mapper-persistent-data lvm2<span class="hljs-meta prompt_"># </span><span class="language-bash">Step 2: 添加软件源信息</span>sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<span class="hljs-meta prompt_"># </span><span class="language-bash">Step 3: 更新并安装 Docker-CE</span>sudo yum makecache fastsudo yum -y install docker-ce<span class="hljs-meta prompt_"># </span><span class="language-bash">Step 4: 开启Docker服务</span>sudo service docker startcurl -L https://get.daocloud.io/docker/compose/releases/download/v2.2.2/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-composechmod +x /usr/local/bin/docker-compose</code></pre></div><p>2、脚本文件可直接下载使用<br><a href="https://www.yuque.com/attachments/yuque/0/2023/sh/3009901/1677819222963-3b77a451-0c55-4a77-a4b9-19594c29ff66.sh">add-docker-and-compose.sh</a></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ol><li>上传脚本</li><li>赋权脚本</li></ol><div class="code-wrapper"><pre><code class="hljs shell">chmod -R 777 脚本.sh</code></pre></div><ol start="3"><li>运行脚本</li></ol><p><img src="https://lensman-oss.oss-cn-shanghai.aliyuncs.com/blog-images/FqlcZMnI8p2d305xycDcrbDfrI5l.png"></p><h2 id="检验结果"><a href="#检验结果" class="headerlink" title="检验结果"></a>检验结果</h2><div class="code-wrapper"><pre><code class="hljs shell">docker -vdocker-compose -v</code></pre></div><p><img src="https://lensman-oss.oss-cn-shanghai.aliyuncs.com/blog-images/FoJvzsezXvQv3VTmfuVYbiUP4V8u.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
