<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>规则引擎Drools</title>
    <link href="/2023/03/07/oxao8qyeporktgyl/"/>
    <url>/2023/03/07/oxao8qyeporktgyl/</url>
    
    <content type="html"><![CDATA[<h2 id="规则引擎概述"><a href="#规则引擎概述" class="headerlink" title="规则引擎概述"></a>规则引擎概述</h2><blockquote><p>规则引擎，全称为业务规则管理系统，英文名为 BRMS(即 Business Rule Management System)。规则引擎的主要思想是将应用程序中的业务决策部分分离出来，并使用预定义的语义模块编写业务决策（业务规则），由用户或开发者在需要时进行配置、管理。<br>需要注意的是规则引擎并不是一个具体的技术框架，而是指的一类系统，即业务规则管理系统。目前市面上具体的规则引擎产品有：drools、VisualRules、iLog 等。<br>规则引擎实现了将业务决策从应用程序代码中分离出来，接收数据输入，解释业务规则，并根据业务规则做出业务决策。规则引擎其实就是一个输入输出平台。</p></blockquote><h2 id="规则引擎优势"><a href="#规则引擎优势" class="headerlink" title="规则引擎优势"></a>规则引擎优势</h2><ol><li>业务规则与系统代码分离，实现业务规则的集中管理</li><li>在不重启服务的情况下可随时对业务规则进行扩展和维护</li><li>可以动态修改业务规则，从而快速响应需求变更</li><li>规则引擎是相对独立的，只关心业务规则，使得业务分析人员也可以参与编辑、维护系统的业务规则</li><li>减少了硬编码业务规则的成本和风险</li><li>使用规则引擎提供的规则编辑工具，使复杂的业务规则实现变得的简单</li></ol><h2 id="规则引擎常用场景"><a href="#规则引擎常用场景" class="headerlink" title="规则引擎常用场景"></a>规则引擎常用场景</h2><blockquote><p>对于一些存在比较复杂的业务规则并且业务规则会频繁变动的系统比较适合使用规则引擎，如下：</p></blockquote><ol><li>风险控制系统—-风险贷款、风险评估</li><li>反欺诈项目—-银行贷款、征信验证</li><li>决策平台系统—-财务计算</li><li>促销平台系统—-满减、打折、加价购</li></ol><h2 id="Drools-实战"><a href="#Drools-实战" class="headerlink" title="Drools 实战"></a>Drools 实战</h2><p><img src="https://lensman-oss.oss-cn-shanghai.aliyuncs.com/blog-images/FlJM5jMPBB1zXsPokIchP0jDpouX.jpeg"></p><h3 id="启动-Drools-的-WorkBench"><a href="#启动-Drools-的-WorkBench" class="headerlink" title="启动 Drools 的 WorkBench"></a>启动 Drools 的 WorkBench</h3><div class="code-wrapper"><pre><code class="hljs java">docker pull jboss/drools-workbench-showcase:<span class="hljs-number">7.6</span><span class="hljs-number">.0</span>.Finaldocker run -p <span class="hljs-number">8080</span>:<span class="hljs-number">8080</span> -p <span class="hljs-number">8001</span>:<span class="hljs-number">8001</span> -d --name drools-workbench jboss/drools-workbench-showcase:<span class="hljs-number">7.6</span><span class="hljs-number">.0</span>.Final</code></pre></div><p>访问地址：<a href="http://ip:8080/drools-wb">http://ip:8080/drools-wb</a><br>账号密码：admin&amp;admin<br><img src="https://cdn.nlark.com/yuque/0/2023/png/3009901/1678362589948-45d72dae-dcca-4217-909b-167695e5ee15.png#averageHue=%23ececec&clientId=u1f0011f4-4430-4&from=paste&height=947&id=u78c43dd1&name=image.png&originHeight=947&originWidth=1494&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=37690&status=done&style=none&taskId=u113eb7f0-3756-4733-b389-aee4a0a92ce&title=&width=1494" alt="image.png"><br>添加项目<br><img src="https://lensman-oss.oss-cn-shanghai.aliyuncs.com/blog-images/FtEqTq02tdPl67zrlcLvVvjcdnnt.png"><br>添加数据对象<br><img src="https://lensman-oss.oss-cn-shanghai.aliyuncs.com/blog-images/Fu-RJemxgPIVa6jbDkc6NgYn3B4l.png"><br><img src="https://lensman-oss.oss-cn-shanghai.aliyuncs.com/blog-images/FiBx3R5oXtP4VCqZ4uEy0O5YmNjw.png"><br><img src="https://lensman-oss.oss-cn-shanghai.aliyuncs.com/blog-images/FhQxEpPoPo6AD39uNSvkaxKtXJeT.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/3009901/1678363733531-525ac753-6c3e-4d16-8005-a44c18fcdb45.png#averageHue=%23eeeded&clientId=u1f0011f4-4430-4&from=paste&height=947&id=u337339cb&name=image.png&originHeight=947&originWidth=1494&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=76969&status=done&style=none&taskId=uce1b4ee2-eeaf-4971-b3df-3714e6c2278&title=&width=1494" alt="image.png"></p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.myteam.presonrule;rule <span class="hljs-string">&quot;rule_person_1&quot;</span>    when        $person:Person(age&lt;=<span class="hljs-number">6</span>)    then        System.out.println(<span class="hljs-string">&quot;children&quot;</span>);endrule <span class="hljs-string">&quot;rule_person_2&quot;</span>    when        $person:Person(age&gt;<span class="hljs-number">6</span> &amp;&amp; age&lt;=<span class="hljs-number">14</span>)    then        System.out.println(<span class="hljs-string">&quot;early youth&quot;</span>);endrule <span class="hljs-string">&quot;rule_person_3&quot;</span>    when        $person:Person(age&gt;<span class="hljs-number">14</span>)    then        System.out.println(<span class="hljs-string">&quot;big children&quot;</span>);end</code></pre></div><p><img src="https://lensman-oss.oss-cn-shanghai.aliyuncs.com/blog-images/Fn8p8q8NfqStZQISEkdJY08S2iN4.png"><br><img src="https://lensman-oss.oss-cn-shanghai.aliyuncs.com/blog-images/FpiTBEpwvJLufBVF2_CmmLz6LJSO.png"><br>进入容器查看日志：</p><div class="code-wrapper"><pre><code class="hljs java">docker exec -it drools-workbench /bin/bash</code></pre></div><p><img src="https://cdn.nlark.com/yuque/0/2023/png/3009901/1678364036101-b9b06d92-bba5-4125-9676-6f7da10090f1.png#averageHue=%23254155&clientId=u1f0011f4-4430-4&from=paste&height=357&id=u48493648&name=image.png&originHeight=357&originWidth=1324&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=616501&status=done&style=none&taskId=u9c341701-b5be-4f46-937e-73d6b46d6ed&title=&width=1324" alt="image.png"><br>设置 Session<br><img src="https://lensman-oss.oss-cn-shanghai.aliyuncs.com/blog-images/FpiTBEpwvJLufBVF2_CmmLz6LJSO.png"><br><img src="https://lensman-oss.oss-cn-shanghai.aliyuncs.com/blog-images/FojeTwRK1SnTZX5OjozmmBUh7ohb.png"><img src="https://cdn.nlark.com/yuque/0/2023/png/3009901/1678364674086-30f3b815-dd19-49ce-a4be-fc4fc5a67646.png#averageHue=%23274559&clientId=u1f0011f4-4430-4&from=paste&height=362&id=ubebeec0d&name=image.png&originHeight=362&originWidth=1329&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=517997&status=done&style=none&taskId=u622c9f04-cc3f-4a07-83b7-45eb5cd077d&title=&width=1329" alt="image.png"><br>在 springBoot 项目中引入坐标</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.drools<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>drools-compiler<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>7.10.0.Final<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><p>在项目中创建一个数据对象 Person，需要和 WorkBench 中创建的 Person 包名、类名完全相同，属性也需要对应</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.myteam.presonrule;<span class="hljs-comment">/**</span><span class="hljs-comment">* This class was automatically generated by the data modeler tool.</span><span class="hljs-comment">*/</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">java</span>.io.Serializable &#123;    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;    <span class="hljs-keyword">private</span> java.lang.Long id;    <span class="hljs-keyword">private</span> java.lang.String name;    <span class="hljs-keyword">private</span> java.lang.Integer age;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span> &#123;    &#125;    <span class="hljs-keyword">public</span> java.lang.Long <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.id;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(java.lang.Long id)</span> &#123;        <span class="hljs-built_in">this</span>.id = id;    &#125;    <span class="hljs-keyword">public</span> java.lang.String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(java.lang.String name)</span> &#123;        <span class="hljs-built_in">this</span>.name = name;    &#125;    <span class="hljs-keyword">public</span> java.lang.Integer <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.age;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(java.lang.Integer age)</span> &#123;        <span class="hljs-built_in">this</span>.age = age;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(java.lang.Long id, java.lang.String name,</span><span class="hljs-params">                  java.lang.Integer age)</span> &#123;        <span class="hljs-built_in">this</span>.id = id;        <span class="hljs-built_in">this</span>.name = name;        <span class="hljs-built_in">this</span>.age = age;    &#125;&#125;</code></pre></div><p>新建测试方法</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yjc.openholiday;<span class="hljs-keyword">import</span> com.myteam.presonrule.Person;<span class="hljs-keyword">import</span> org.drools.core.io.impl.UrlResource;<span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<span class="hljs-keyword">import</span> org.kie.api.KieServices;<span class="hljs-keyword">import</span> org.kie.api.builder.KieModule;<span class="hljs-keyword">import</span> org.kie.api.builder.KieRepository;<span class="hljs-keyword">import</span> org.kie.api.runtime.KieContainer;<span class="hljs-keyword">import</span> org.kie.api.runtime.KieSession;<span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<span class="hljs-keyword">import</span> java.io.InputStream;<span class="hljs-meta">@SpringBootTest</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">OpenHolidayApplicationTests</span> &#123;    <span class="hljs-meta">@Test</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;        <span class="hljs-comment">//通过此URL可以访问到maven仓库中的jar包</span>        <span class="hljs-comment">//URL地址构成：http://ip地址:Tomcat端口号/WorkBench工程名/maven2/坐标/版本号/xxx.jar</span>        <span class="hljs-comment">//String url = &quot;http://192.168.86.101:8080/kie-drools-wb/maven2/com/guohaowei/pro1/1.0.0/pro1-1.0.0.jar&quot;;</span>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;http://139.224.64.206:8080/drools-wb/maven2/com/myteam/presonrule/1.0.0/presonrule-1.0.0.jar&quot;</span>;        <span class="hljs-type">KieServices</span> <span class="hljs-variable">kieServices</span> <span class="hljs-operator">=</span> KieServices.Factory.get();        <span class="hljs-comment">//通过Resource资源对象加载jar包</span>        <span class="hljs-type">UrlResource</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> (UrlResource) kieServices.getResources().newUrlResource(url);        <span class="hljs-comment">//通过Workbench提供的服务来访问maven仓库中的jar包资源，需要先进行Workbench的认证</span>        resource.setUsername(<span class="hljs-string">&quot;admin&quot;</span>);        resource.setPassword(<span class="hljs-string">&quot;admin&quot;</span>);        resource.setBasicAuthentication(<span class="hljs-string">&quot;enabled&quot;</span>);        <span class="hljs-comment">//将资源转换为输入流，通过此输入流可以读取jar包数据</span>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> resource.getInputStream();        <span class="hljs-comment">//创建仓库对象，仓库对象中保存Drools的规则信息</span>        <span class="hljs-type">KieRepository</span> <span class="hljs-variable">repository</span> <span class="hljs-operator">=</span> kieServices.getRepository();        <span class="hljs-comment">//通过输入流读取maven仓库中的jar包数据，包装成KieModule模块添加到仓库中</span>        <span class="hljs-type">KieModule</span> <span class="hljs-variable">kieModule</span> <span class="hljs-operator">=</span>                repository.                        addKieModule(kieServices.getResources().newInputStreamResource(inputStream));        <span class="hljs-comment">//基于KieModule模块创建容器对象，从容器中可以获取session会话</span>        <span class="hljs-type">KieContainer</span> <span class="hljs-variable">kieContainer</span> <span class="hljs-operator">=</span> kieServices.newKieContainer(kieModule.getReleaseId());        <span class="hljs-type">KieSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> kieContainer.newKieSession();        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();        person.setAge(<span class="hljs-number">200</span>);        session.insert(person);        session.fireAllRules();        session.dispose();    &#125;&#125;</code></pre></div><p>监控结果<br><img src="http://lensman-oss.oss-cn-shanghai.aliyuncs.com/blog-images/FiFhBhb8CuCMlrKXrzSC3jlzGwRF.png"><br>代码位置<br><a href="https://gitee.com/lovepaul/drools-person-demo.git">https://gitee.com/lovepaul/drools-person-demo.git</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>为什么有Full GC还会发生OOM</title>
    <link href="/2023/03/07/uo7p97db2v3fxubr/"/>
    <url>/2023/03/07/uo7p97db2v3fxubr/</url>
    
    <content type="html"><![CDATA[<h2 id="既然在触发-full-gc-的时候，年老代和持久代都会被清理，那么为什么还会出现-oom-问题？"><a href="#既然在触发-full-gc-的时候，年老代和持久代都会被清理，那么为什么还会出现-oom-问题？" class="headerlink" title="既然在触发 full gc 的时候，年老代和持久代都会被清理，那么为什么还会出现 oom 问题？"></a>既然在触发 full gc 的时候，年老代和持久代都会被清理，那么为什么还会出现 oom 问题？</h2><p>而且对于强引用，当内存空间不足，java 虚拟机宁愿抛出 oom 错误，使程序异常终止，也不会靠随意回收具有强引用的对象来解决内存不足问题；</p><p>那么 full gc 机制的存在有何意义？<br>还是说 fgc 主要针对的是驻扎在老年的的软引用？ 既然如此，对于四种引用的方式如何抉择？总不能所有对象都创建引用队列使用软引用或弱引用吧？</p><p>举个栗子:<br>为什么我请了佣人来收拾房间，我的房间还是会堆满？那我还请佣人来干什么？</p><p>他不是号称能把我房间里的垃圾都清理干净么?</p><p>问题是如果你房间里堆得都是宝贝（或者看起来都是宝贝）的话，佣人也没辙。</p><p>怎么判断是不是宝贝呢？<br>就看主人有没有用手抓着他它—被抓住的宝贝如果有连接到别的宝贝的话那被连接到的也算上。</p><p>用例抓住的肯定是宝贝，一点没碰的肯定不是宝贝，半抓不抓着的先观望。</p><p>总结：<br>full gc 收集的是垃圾，及不可用的东西，如果对内存中的对象大部分是可达的，而此时又有新的对象需要分配内存空间，如果此时可用空间不够就会 OOM。</p><p>还有一个简单的例子，你的堆只有 100M，你 new 了一个 101M 的大数组,GC 再牛逼也没用</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>GC-案例</title>
    <link href="/2023/03/07/ri0y3cgry9p5u9et/"/>
    <url>/2023/03/07/ri0y3cgry9p5u9et/</url>
    
    <content type="html"><![CDATA[<h2 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h2><ul><li>订单服务器链接不上，超时。</li><li>没有熔断措施，导致其他上游服务超时。</li><li>服务器雪崩，整个环境不可用</li></ul><h2 id="项目目标"><a href="#项目目标" class="headerlink" title="项目目标"></a>项目目标</h2><blockquote><ol><li>解决线上问题，排查问题，找到具体代码</li><li>分析 JVM</li></ol></blockquote><h2 id="关键事项"><a href="#关键事项" class="headerlink" title="关键事项"></a>关键事项</h2><ul><li>使用 Visualvm 分析</li><li>下载 dump 文件，分析 dump 文件</li><li>基础环境：Java1.8 版本，IDEA，</li></ul><h2 id="复现问题"><a href="#复现问题" class="headerlink" title="复现问题"></a>复现问题</h2><blockquote><p>问题的主要就是对象在频繁的申请，频繁的放入，导致堆被撑爆</p></blockquote><ol><li><strong>编写对应的代码，其实对应的就是频繁的放入 list，让 list 去无限的扩容，这时候如果是面试，就可以问 list 的扩容机制和 map 的扩容机制问题</strong></li></ol><div class="code-wrapper"><pre><code class="hljs java">  <span class="hljs-keyword">package</span> com.example.testjvm;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<span class="hljs-keyword">import</span> java.util.ArrayList;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 测试堆内存爆表</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> admin</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023/03/07</span><span class="hljs-comment"> */</span><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestController</span> &#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 集合对象</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> List&lt;TestJAVA&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 会报错的接口</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@GetMapping(&quot;/error&quot;)</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">error</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">900000000</span>; i++) &#123;            <span class="hljs-type">TestJAVA</span> <span class="hljs-variable">build</span> <span class="hljs-operator">=</span> TestJAVA.builder()                    .e(i)                    .f(i)                    .b(i)                    .g(i)                    .a(i).build();            list.add(build);        &#125;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 正常的接口</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> String&#125;</span><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException IOException</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@GetMapping(&quot;/normal&quot;)</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">normal</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;normal&quot;</span>;    &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.testjvm;<span class="hljs-keyword">import</span> lombok.Builder;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 测试实体类</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> admin</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023/03/07</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Builder</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestJAVA</span> &#123;    Integer a=<span class="hljs-number">0</span>;    Integer b=<span class="hljs-number">0</span>;    Integer c=<span class="hljs-number">0</span>;    Integer d=<span class="hljs-number">0</span>;    Integer e=<span class="hljs-number">0</span>;    Integer f=<span class="hljs-number">0</span>;    Integer g=<span class="hljs-number">0</span>;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TestJAVA</span><span class="hljs-params">(Integer a, Integer b, Integer c, Integer d, Integer e, Integer f, Integer g)</span> &#123;        <span class="hljs-built_in">this</span>.a = a;        <span class="hljs-built_in">this</span>.b = b;        <span class="hljs-built_in">this</span>.c = c;        <span class="hljs-built_in">this</span>.d = d;        <span class="hljs-built_in">this</span>.e = e;        <span class="hljs-built_in">this</span>.f = f;        <span class="hljs-built_in">this</span>.g = g;    &#125;&#125;</code></pre></div><ol start="2"><li><strong>开始模拟线上请求，在 IDEA 里面设置好对应的参数</strong></li></ol><div class="code-wrapper"><pre><code class="hljs java"># Xmx设置堆内存的最大 Heap 值# Xms设置堆内存的最小 Heap 值# +HeapDumpOnOutOfMemoryError可以让JVM在出现内存溢出时候Dump出当前的内存转储快照。快照格式为java_pid2821.hprof（<span class="hljs-number">2821</span>为Java进程号）-Xms200m -Xmx200m -XX:+HeapDumpOnOutOfMemoryError</code></pre></div><p>记得设置好对应的 workdirectory 的工作目录<br><img src="https://lensman-oss.oss-cn-shanghai.aliyuncs.com/blog-images/Fofio3VUPrtd2aqOXofh-CUBDXBz.png"></p><ol start="3"><li><strong>IDEA 配置 VisualVM，安装对应的插件并配置</strong></li></ol><p>软件提供如下：<br><a href="https://www.yuque.com/attachments/yuque/0/2023/zip/3009901/1678159735821-340d751a-0edd-4de5-8e13-a23c149c30a7.zip">visualvm_215.zip</a><br><img src="https://cdn.nlark.com/yuque/0/2023/png/3009901/1678159642592-ee7ba654-4440-4f06-95c9-9c4d6ea17638.png#averageHue=%23373c41&clientId=udf18f225-0e62-4&from=paste&height=720&id=ue3cf7801&name=image.png&originHeight=720&originWidth=998&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=101538&status=done&style=none&taskId=u620d45d8-4afe-4a6e-93eb-b5083999063&title=&width=998" alt="image.png"></p><ol start="4"><li><strong>用 visualVM 启动</strong></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/3009901/1678159848269-68c0d9c6-a34b-485d-80b3-c5b4ee89162b.png#averageHue=%236d8d5b&clientId=udf18f225-0e62-4&from=paste&height=707&id=u6857e910&name=image.png&originHeight=707&originWidth=1287&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=124202&status=done&style=none&taskId=ua3802a2b-721f-470b-9a48-db41db07366&title=&width=1287" alt="image.png"><br><img src="http://lensman-oss.oss-cn-shanghai.aliyuncs.com/blog-images/Fu36lWKUK60El8A11-bImj4RzCpa.png"></p><ol start="5"><li><strong>堆内存爆表</strong></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/3009901/1678161403921-d19ea574-c80c-4a4a-b8c4-f44fbc0cec6e.png#averageHue=%23f4f0e7&clientId=udf18f225-0e62-4&from=paste&height=1043&id=u8b5aff11&name=image.png&originHeight=1043&originWidth=1287&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=97123&status=done&style=none&taskId=u896f7d79-ce60-4094-ac87-db81ef6e454&title=&width=1287" alt="image.png"></p><ol start="6"><li><strong>查看 GC 的命令</strong></li></ol><div class="code-wrapper"><pre><code class="hljs java">sudo -u tomcat jpssudo -u tomcat jstat -gcutil <span class="hljs-number">3168</span> <span class="hljs-number">1000</span>  #每隔<span class="hljs-number">10</span>秒显示堆比例sudo -u tomcat jstat -gc <span class="hljs-number">3168</span> <span class="hljs-number">10000</span>  #每隔<span class="hljs-number">10</span>秒显示堆使用大小，单位KBjmap -dump:format=b,file=filename pid #线上直接在已经假死的程序上获得dump文件的命令</code></pre></div><p>在刚刚设置的 work 工作目录中有已经爆表的 dump 文件了<br><img src="https://cdn.nlark.com/yuque/0/2023/png/3009901/1678161164610-915c52f7-617c-4e49-8f3a-efd5fb74622e.png#averageHue=%23f2efe9&clientId=udf18f225-0e62-4&from=paste&height=707&id=uca6b3d7f&name=image.png&originHeight=707&originWidth=1287&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=122162&status=done&style=none&taskId=u9c92d2ca-c203-4ae7-9586-5a263d81d74&title=&width=1287" alt="image.png"><br><img src="http://lensman-oss.oss-cn-shanghai.aliyuncs.com/blog-images/FnwoLx4VsYW9F6Z-pXJ39F8zBhxc.png"><br>数据直接给出了答案，这个对象，很大，这里出了问题<br><img src="https://cdn.nlark.com/yuque/0/2023/png/3009901/1678161257356-2eea2e86-2226-4d28-bb4e-6860531ac942.png#averageHue=%23f3efec&clientId=udf18f225-0e62-4&from=paste&height=518&id=u1348b1ed&name=image.png&originHeight=518&originWidth=1280&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=113828&status=done&style=none&taskId=u157a943b-21b8-48cb-ab61-449d978b399&title=&width=1280" alt="image.png"></p><h2 id="分析问题"><a href="#分析问题" class="headerlink" title="分析问题"></a>分析问题</h2><ul><li>Eden 区，一直在创建新的对象，一直在请求空间</li><li>当 Eden 区达到百分百的时候，触发一次 YGC，然后进行垃圾回收，S0 和 S1 互换，存活的对象，会移动到老年 O 区</li><li>当老年 O 区达到百分百的时候，触发一次 FULL GC，进行所有的垃圾回收</li><li>所以主要原因是 Eden 区一直在产生对象，撑爆了设定的堆内存</li></ul><h2 id="JVM-一些参数说明"><a href="#JVM-一些参数说明" class="headerlink" title="JVM 一些参数说明"></a>JVM 一些参数说明</h2><ul><li>S0C：第一个幸存区的大小，单位 kb</li><li>S1C：第二个幸存区的大小，单位 kb</li><li>S0U：第一个幸存区的使用大小，单位 kb</li><li>S1U：第二个幸存区的使用大小，单位 kb</li><li>EC：伊甸园区的大小，单位 kb</li><li>EU：伊甸园区的使用大小，单位 kb</li><li>OC：老年代大小，单位 kb</li><li>OU：老年代使用大小，单位 kb</li><li>MC：方法区大小，单位 kb</li><li>MU：方法区使用大小，单位 kb</li><li>CCSC:压缩类空间大小，单位 kb</li><li>CCSU:压缩类空间使用大小，单位 kb</li><li>YGC：年轻代垃圾回收次数，单位 s</li><li>YGCT：年轻代垃圾回收消耗时间，单位 s</li><li>FGC：老年代垃圾回收次数，单位 s</li><li>FGCT：老年代垃圾回收消耗时间，单位 s</li><li>GCT：垃圾回收消耗总时间，单位 s</li></ul><h2 id="内存溢出-out-of-memory"><a href="#内存溢出-out-of-memory" class="headerlink" title="内存溢出 out of memory"></a>内存溢出 out of memory</h2><p><em>是指程序在申请内存时，没有足够的内存空间供其使用，出现 out of memory；比如申请了一个 integer,但给它存了 long 才能存下的数，那就是内存溢出。</em><br><em>个盘子用尽各种方法只能装 4 个果子，你装了 5 个，结果掉倒地上不能吃了。这就是溢出！比方说栈，栈满时再做进栈必定产生空间溢出，叫上溢，栈空时再做退栈也产生空间溢出，称为下溢。就是分配的内存不足以放下数据项序列,称为内存溢出.</em></p><h2 id="内存泄露-memory-leak"><a href="#内存泄露-memory-leak" class="headerlink" title="内存泄露 memory leak"></a>内存泄露 memory leak</h2><p><em>是指程序在申请内存后，无法释放已申请的内存空间，一次内存泄露危害可以忽略，但内存泄露堆积后果很严重，无论多少内存,迟早会被占光。</em><br><em>memory leak 会最终会导致 out of memory！</em></p><h3 id="常见的内存泄露"><a href="#常见的内存泄露" class="headerlink" title="常见的内存泄露"></a>常见的内存泄露</h3><div class="code-wrapper"><pre><code class="hljs">  1. 文件流不关闭  2. 数据库连接没有关闭  3. 内存使用过多</code></pre></div><h2 id="内存溢出的原因以及解决方法"><a href="#内存溢出的原因以及解决方法" class="headerlink" title="内存溢出的原因以及解决方法"></a>内存溢出的原因以及解决方法</h2><h3 id="原因列表："><a href="#原因列表：" class="headerlink" title="原因列表："></a>原因列表：</h3><ol><li> 内存中加载的数据量过于庞大，如一次从数据库取出过多数据；</li><li> 集合类中有对对象的引用，使用完后未清空，使得 JVM 不能回收；</li><li> 代码中存在死循环或循环产生过多重复的对象实体；</li><li> 使用的第三方软件中的 BUG；</li><li> 启动参数内存值设定的过小</li></ol><h3 id="方案列表："><a href="#方案列表：" class="headerlink" title="方案列表："></a>方案列表：</h3><ol><li> 第一，修改 JVM 启动参数，直接增加内存。(-Xms，-Xmx 参数一定不要忘记加。)</li><li> 第二，检查错误日志，查看“OutOfMemory”错误前是否有其它异常或错误。</li><li> 第三，对代码进行走查和分析，找出可能发生内存溢出的位置。</li></ol><h3 id="重点排查："><a href="#重点排查：" class="headerlink" title="重点排查："></a>重点排查：</h3><ol><li> 检查对数据库查询中，是否有一次获得全部数据的查询。一般来说，如果一次取十万条记录到内存，就可能引起内存溢出。这个问题比较隐蔽，在上线前，数据库中数据较少，不容易出问题，上线后，数据库中数据多了，一次查询就有可能引起内存溢出。因此对于数据库查询尽量采用分页的方式查询。</li><li> 检查代码中是否有死循环或递归调用。</li><li> 检查是否有大循环重复产生新对象实体。</li><li> 检查对数据库查询中，是否有一次获得全部数据的查询。一般来说，如果一次取十万条记录到内存，就可能引起内存溢出。这个问题比较隐蔽，在上线前，数据库中数据较少，不容易出问题，上线后，数据库中数据多了，一次查询就有可能引起内存溢出。因此对于数据库查询尽量采用分页的方式查询。</li><li> 检查 List、MAP 等集合对象是否有使用完后，未清除的问题。List、MAP 等集合对象会始终存有对对象的引用，使得这些对象不能被 GC 回收。</li><li> 使用内存查看工具动态查看内存使用情况</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>中间件——日志平台</title>
    <link href="/2023/03/03/qleyofzi4m3x6y6n/"/>
    <url>/2023/03/03/qleyofzi4m3x6y6n/</url>
    
    <content type="html"><![CDATA[<h2 id="1、项目背景"><a href="#1、项目背景" class="headerlink" title="1、项目背景"></a>1、项目背景</h2><blockquote><p>上一家离开的公司，使用的技术是 springcloud 的技术，日志是分散在各处的。当时的技术经理，让我搭建一套属于公司自己的日志系统，我做了相应了调研。<br>有了以下的几个方案。</p></blockquote><ul><li>阿里日志系统，自带，可集成</li><li>开源的框架 Plumelog</li><li>传统的 ELK</li></ul><h2 id="2、方案分析"><a href="#2、方案分析" class="headerlink" title="2、方案分析"></a>2、方案分析</h2><blockquote><p>分析以上的框架和成本，最终决定用 plumelog 日志做就够用</p></blockquote><ul><li>每天线上的日志没有那么多，仅仅在商品大卖的时候日志多了些</li><li>ELK 需要再次学习的成本还是有的，而且需要的成本比较大</li><li>阿里的最方便，基本集成就可以了，但是有相关的费用</li></ul><h2 id="3、关键事项"><a href="#3、关键事项" class="headerlink" title="3、关键事项"></a>3、关键事项</h2><blockquote><p>为达成上述目标，需要完成哪些关键事项。</p></blockquote><ul><li>学习 PlumeLog 开源框架：</li><li>搭建 ES 服务</li><li>搭建对应的 springboot 服务</li></ul><h2 id="4、Plumelog-的日志架构图"><a href="#4、Plumelog-的日志架构图" class="headerlink" title="4、Plumelog 的日志架构图"></a>4、Plumelog 的日志架构图</h2><p><img src="https://lensman-oss.oss-cn-shanghai.aliyuncs.com/blog-images/FvMke_5TJii6OPccmDlSpw8QYJQM.jpeg"></p><h2 id="5、搭建-PlumeLog-的服务"><a href="#5、搭建-PlumeLog-的服务" class="headerlink" title="5、搭建 PlumeLog 的服务"></a>5、搭建 PlumeLog 的服务</h2><ol><li><strong>首先搭建对应的 docker 和 docker-compose 的运行环境</strong><ul><li>参考本知识库中的：<a href="https://www.yuque.com/lensman/msrly3/uq7l3qt11popnbhl">Docker&amp;Compose——安装</a></li></ul></li><li><strong>上传脚本到文件里面</strong><ul><li>sh 脚本命令：<a href="https://www.yuque.com/attachments/yuque/0/2023/sh/3009901/1677846821322-fa235815-23a2-4f9f-90b8-a589f1c215bd.sh?_lake_card=%7B%22src%22:%22https://www.yuque.com/attachments/yuque/0/2023/sh/3009901/1677846821322-fa235815-23a2-4f9f-90b8-a589f1c215bd.sh%22,%22name%22:%22init-data.sh%22,%22size%22:109,%22ext%22:%22sh%22,%22source%22:%22%22,%22status%22:%22done%22,%22download%22:true,%22taskId%22:%22ucd2598b3-6979-4028-be85-8400a392e4b%22,%22taskType%22:%22upload%22,%22type%22:%22text/x-sh%22,%22__spacing%22:%22both%22,%22mode%22:%22title%22,%22id%22:%22uc4b00657%22,%22margin%22:%7B%22top%22:true,%22bottom%22:true%7D,%22card%22:%22file%22%7D">init-data.sh</a></li><li>docker-compose 脚本命令：<a href="https://www.yuque.com/attachments/yuque/0/2023/yml/3009901/1677897769475-b426202e-7df2-4d08-aa63-de59ba3013bd.yml?_lake_card=%7B%22src%22:%22https://www.yuque.com/attachments/yuque/0/2023/yml/3009901/1677897769475-b426202e-7df2-4d08-aa63-de59ba3013bd.yml%22,%22name%22:%22docker-compose.yml%22,%22size%22:1548,%22ext%22:%22yml%22,%22source%22:%22%22,%22status%22:%22done%22,%22download%22:true,%22taskId%22:%22ue9269e0d-6e4e-44fc-a24b-2594ea7c569%22,%22taskType%22:%22upload%22,%22type%22:%22%22,%22__spacing%22:%22both%22,%22id%22:%22u50e7b25a%22,%22margin%22:%7B%22top%22:true,%22bottom%22:true%7D,%22card%22:%22file%22%7D">docker-compose.yml</a></li></ul></li></ol><div class="code-wrapper"><pre><code class="hljs shell">chmod -R 777 init-data.sh./init-data.shdocker-compose up -d</code></pre></div><ol start="3"><li><strong>等待运行完毕，校验安装的结果</strong><blockquote><p><em>这里面的地址记得自己换</em></p></blockquote></li></ol><p><img src="https://lensman-oss.oss-cn-shanghai.aliyuncs.com/blog-images/Fnv4IhF5AfX4DvuhiHC_eBj-4AAJ.png"></p><h2 id="6、搭建客户端"><a href="#6、搭建客户端" class="headerlink" title="6、搭建客户端"></a>6、搭建客户端</h2><ul><li>可以使用已经运行好的服务：<a href="https://gitee.com/lovepaul/open-holiday.git">https://gitee.com/lovepaul/open-holiday.git</a></li><li>也可以新建对应的 springboot 的微服务，如下代码三件套<ol><li> pom 文件</li></ol></li></ul><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">  <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.yjc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>open-holiday<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>open-holiday<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Demo project for Spring Boot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>de.codecentric<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-admin-starter-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.codehaus.janino<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>janino<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.codehaus.janino/commons-compiler --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.codehaus.janino<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-compiler<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.hutool<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hutool-all<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.6.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-comment">&lt;!--分布式日志收集plumelog--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.plumelog<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>plumelog-logback<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.plumelog<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>plumelog-trace<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.11.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.hutool<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hutool-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.5.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">finalName</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre></div><ol start="2"><li> properties</li></ol><div class="code-wrapper"><pre><code class="hljs shell">server.port=8083spring.application.name=open-holidayspring.redis.host=124.223.101.204spring.redis.password=521521plumelog.appName=$&#123;spring.application.name&#125;plumelog.redisHost=$&#123;spring.redis.host&#125;plumelog.redisAuth=$&#123;spring.redis.password&#125;spring.profiles.active=dev</code></pre></div><ol start="3"><li> logback-spring.xml 文件</li></ol><div class="code-wrapper"><pre><code class="hljs shell">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;configuration debug=&quot;false&quot;&gt;    &lt;conversionRule conversionWord=&quot;clr&quot; converterClass=&quot;org.springframework.boot.logging.logback.ColorConverter&quot;/&gt;    &lt;conversionRule conversionWord=&quot;wex&quot;                    converterClass=&quot;org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter&quot;/&gt;    &lt;conversionRule conversionWord=&quot;wEx&quot;                    converterClass=&quot;org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter&quot;/&gt;    &lt;!-- 增加如下的TLog MDC Listener --&gt;    &lt;!-- 彩色日志格式 --&gt;    &lt;property name=&quot;CONSOLE_LOG_PATTERN&quot;              value=&quot;$&#123;CONSOLE_LOG_PATTERN:-%clr(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;)&#123;faint&#125; %clr($&#123;LOG_LEVEL_PATTERN:-%5p&#125;) %clr($&#123;PID:- &#125;)&#123;magenta&#125; %clr(---)&#123;faint&#125; %clr([%15.15t])&#123;faint&#125; %clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125; %clr(:)&#123;faint&#125;  %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;&quot;/&gt;    &lt;!--输出到控制台--&gt;    &lt;appender name=&quot;CONSOLE&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;        &lt;filter class=&quot;com.plumelog.logback.util.FilterSyncLogger&quot;&gt;            &lt;level&gt;info&lt;/level&gt;            &lt;filterPackage&gt;com.plumelog.trace.aspect.AbstractAspect&lt;/filterPackage&gt;        &lt;/filter&gt;        &lt;encoder &gt;            &lt;Pattern&gt;$&#123;CONSOLE_LOG_PATTERN&#125;&lt;/Pattern&gt;            &lt;!-- 设置字符集 --&gt;            &lt;charset&gt;UTF-8&lt;/charset&gt;        &lt;/encoder&gt;    &lt;/appender&gt;    &lt;!-- 输出到文件 --&gt;    &lt;appender name=&quot;file&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;            &lt;FileNamePattern&gt;logs/$&#123;plumelog.appName&#125;.log.%d&#123;yyyy-MM-dd&#125;.log&lt;/FileNamePattern&gt;            &lt;MaxHistory&gt;3&lt;/MaxHistory&gt;        &lt;/rollingPolicy&gt;        &lt;encoder &gt;            &lt;Pattern&gt;$&#123;CONSOLE_LOG_PATTERN&#125;&lt;/Pattern&gt;            &lt;!-- 设置字符集 --&gt;            &lt;charset&gt;UTF-8&lt;/charset&gt;        &lt;/encoder&gt;    &lt;/appender&gt;    &lt;!-- 环境配置 --&gt;    &lt;springProperty scope=&quot;context&quot; name=&quot;plumelog.appName&quot; source=&quot;plumelog.appName&quot;/&gt;    &lt;springProperty scope=&quot;context&quot; name=&quot;plumelog.redisHost&quot; source=&quot;plumelog.redisHost&quot;/&gt;    &lt;springProperty scope=&quot;context&quot; name=&quot;plumelog.redisPort&quot; source=&quot;plumelog.redisPort&quot;/&gt;    &lt;springProperty scope=&quot;context&quot; name=&quot;plumelog.redisAuth&quot; source=&quot;plumelog.redisAuth&quot;/&gt;    &lt;springProperty scope=&quot;context&quot; name=&quot;plumelog.redisDb&quot; source=&quot;plumelog.redisDb&quot;/&gt;    &lt;springProperty scope=&quot;context&quot; name=&quot;plumelog.env&quot; source=&quot;spring.profiles.active&quot;/&gt;    &lt;!-- 输出plumelog --&gt;    &lt;appender name=&quot;plumelog&quot; class=&quot;com.plumelog.logback.appender.RedisAppender&quot;&gt;        &lt;appName&gt;$&#123;plumelog.appName&#125;&lt;/appName&gt;        &lt;redisHost&gt;$&#123;plumelog.redisHost&#125;&lt;/redisHost&gt;        &lt;redisAuth&gt;$&#123;plumelog.redisAuth&#125;&lt;/redisAuth&gt;        &lt;redisDb&gt;$&#123;plumelog.redisDb&#125;&lt;/redisDb&gt;        &lt;env&gt;$&#123;plumelog.env&#125;&lt;/env&gt;    &lt;/appender&gt;    &lt;!-- 配置日志输出，只输出info，只保留控制台和plumelog输出--&gt;    &lt;!-- 正常开发环境本地，只输出到控制台，测试环境只输出到plumelog,生产环境输出到本地文件plumelog,因为有plumelog加持本地文件就保留3天即可--&gt;    &lt;!-- 这些都可以根据环境配置不同加载不同的ref-&gt;--&gt;    &lt;root level=&quot;info&quot;&gt;        &lt;!--输出到控制台--&gt;        &lt;appender-ref ref=&quot;CONSOLE&quot;/&gt;        &lt;!-- 输出到文件 --&gt;        &lt;appender-ref ref=&quot;file&quot;/&gt;        &lt;!-- 输出plumelog --&gt;        &lt;appender-ref ref=&quot;plumelog&quot;/&gt;    &lt;/root&gt;&lt;/configuration&gt;</code></pre></div><ol start="4"><li> 几个配置文件，主要是为了配置链路追踪的</li></ol><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yjc.openholiday.config;<span class="hljs-keyword">import</span> com.plumelog.trace.aspect.AbstractAspect;<span class="hljs-keyword">import</span> org.aspectj.lang.JoinPoint;<span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Around;<span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Aspect;<span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<span class="hljs-comment">/**</span><span class="hljs-comment">* 方面配置</span><span class="hljs-comment">*</span><span class="hljs-comment">* <span class="hljs-doctag">@author</span> admin</span><span class="hljs-comment">* <span class="hljs-doctag">@date</span> 2023/03/04</span><span class="hljs-comment">*/</span><span class="hljs-meta">@Aspect</span>    <span class="hljs-meta">@Component</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AspectConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractAspect</span> &#123;        <span class="hljs-comment">/**</span><span class="hljs-comment">* 围绕</span><span class="hljs-comment">*</span><span class="hljs-comment">* <span class="hljs-doctag">@param</span> joinPoint 连接点</span><span class="hljs-comment">* <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> Object&#125;</span><span class="hljs-comment">* <span class="hljs-doctag">@throws</span> Throwable 可丢弃</span><span class="hljs-comment">*/</span><span class="hljs-comment">// 注意这里要替换自己的包地址</span>        <span class="hljs-meta">@Around(&quot;within(com.yjc..*))</span><span class="hljs-string">&quot;)</span><span class="hljs-string">        public Object around(JoinPoint joinPoint) throws Throwable &#123;</span><span class="hljs-string">            return aroundExecute(joinPoint);</span><span class="hljs-string">        &#125;</span><span class="hljs-string">    &#125;</span><span class="hljs-string"></span></code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yjc.openholiday.config;<span class="hljs-keyword">import</span> com.plumelog.core.TraceId;<span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-keyword">import</span> java.util.UUID;<span class="hljs-comment">/**</span><span class="hljs-comment">* 拦截器</span><span class="hljs-comment">*</span><span class="hljs-comment">* <span class="hljs-doctag">@author</span> admin</span><span class="hljs-comment">* <span class="hljs-doctag">@date</span> 2023/03/04</span><span class="hljs-comment">*/</span><span class="hljs-meta">@Component</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Interceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;        <span class="hljs-comment">/**</span><span class="hljs-comment">* 预处理</span><span class="hljs-comment">*</span><span class="hljs-comment">* <span class="hljs-doctag">@param</span> request  要求</span><span class="hljs-comment">* <span class="hljs-doctag">@param</span> response 回答</span><span class="hljs-comment">* <span class="hljs-doctag">@param</span> handler  处理器</span><span class="hljs-comment">* <span class="hljs-doctag">@return</span> boolean</span><span class="hljs-comment">*/</span>        <span class="hljs-meta">@Override</span>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> &#123;            <span class="hljs-comment">//设置TraceID值，不埋此点链路ID就没有</span>            TraceId.logTraceID.set(UUID.randomUUID().toString().replaceAll(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>));            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;        &#125;        <span class="hljs-comment">/**</span><span class="hljs-comment">* 柱状把手</span><span class="hljs-comment">*</span><span class="hljs-comment">* <span class="hljs-doctag">@param</span> request      要求</span><span class="hljs-comment">* <span class="hljs-doctag">@param</span> response     回答</span><span class="hljs-comment">* <span class="hljs-doctag">@param</span> handler      处理器</span><span class="hljs-comment">* <span class="hljs-doctag">@param</span> modelAndView 模型和视图</span><span class="hljs-comment">*/</span>        <span class="hljs-meta">@Override</span>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> &#123;        &#125;        <span class="hljs-comment">/**</span><span class="hljs-comment">* 完工后</span><span class="hljs-comment">*</span><span class="hljs-comment">* <span class="hljs-doctag">@param</span> request  要求</span><span class="hljs-comment">* <span class="hljs-doctag">@param</span> response 回答</span><span class="hljs-comment">* <span class="hljs-doctag">@param</span> handler  处理器</span><span class="hljs-comment">* <span class="hljs-doctag">@param</span> ex       前任</span><span class="hljs-comment">*/</span>        <span class="hljs-meta">@Override</span>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> &#123;        &#125;    &#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yjc.openholiday.config;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;<span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<span class="hljs-comment">/**</span><span class="hljs-comment">* 拦截器配置</span><span class="hljs-comment">*</span><span class="hljs-comment">* <span class="hljs-doctag">@author</span> admin</span><span class="hljs-comment">* <span class="hljs-doctag">@date</span> 2023/03/04</span><span class="hljs-comment">*/</span><span class="hljs-meta">@Configuration</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InterceptorConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;        <span class="hljs-comment">/**</span><span class="hljs-comment">* 添加拦截器</span><span class="hljs-comment">*</span><span class="hljs-comment">* <span class="hljs-doctag">@param</span> registry 注册表</span><span class="hljs-comment">*/</span>        <span class="hljs-meta">@Override</span>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;            <span class="hljs-comment">// 自定义拦截器，添加拦截路径和排除拦截路径</span>            registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Interceptor</span>()).addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>);        &#125;    &#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yjc.openholiday;<span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<span class="hljs-meta">@SpringBootApplication</span>    <span class="hljs-comment">// 注意这个扫描包是开启链路追踪的</span>    <span class="hljs-meta">@ComponentScan(&#123;&quot;com.plumelog&quot;,&quot;com.yjc.openholiday&quot;&#125;)</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OpenHolidayApplication</span> &#123;        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;            SpringApplication.run(OpenHolidayApplication.class, args);        &#125;    &#125;</code></pre></div><ol start="5"><li> 编写对应的 controller 的接口</li></ol><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yjc.openholiday;<span class="hljs-keyword">import</span> cn.hutool.core.date.DateUtil;<span class="hljs-keyword">import</span> cn.hutool.core.util.IdUtil;<span class="hljs-keyword">import</span> cn.hutool.core.util.ObjectUtil;<span class="hljs-keyword">import</span> cn.hutool.core.util.RandomUtil;<span class="hljs-keyword">import</span> cn.hutool.core.util.StrUtil;<span class="hljs-keyword">import</span> cn.hutool.http.HttpRequest;<span class="hljs-keyword">import</span> cn.hutool.http.HttpResponse;<span class="hljs-keyword">import</span> cn.hutool.http.HttpUtil;<span class="hljs-keyword">import</span> cn.hutool.json.JSONObject;<span class="hljs-keyword">import</span> cn.hutool.json.JSONUtil;<span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<span class="hljs-keyword">import</span> java.util.Date;<span class="hljs-keyword">import</span> java.util.Set;<span class="hljs-meta">@Slf4j</span>    <span class="hljs-meta">@RestController</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HolidayController</span> &#123;        <span class="hljs-meta">@GetMapping(&quot;/test&quot;)</span>        <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getCurrentDataIsHoliday</span><span class="hljs-params">()</span> &#123;            <span class="hljs-type">String</span> <span class="hljs-variable">currentYear</span> <span class="hljs-operator">=</span> DateUtil.format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(), <span class="hljs-string">&quot;yyyy&quot;</span>);            <span class="hljs-type">String</span> <span class="hljs-variable">currentDate</span> <span class="hljs-operator">=</span> DateUtil.format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(), <span class="hljs-string">&quot;MM-dd&quot;</span>);            log.info(<span class="hljs-string">&quot;getCurrentDataIsHoliday-&#123;&#125;----&#123;&#125;&quot;</span>, currentYear, currentDate);            <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://timor.tech/api/holiday/year/&quot;</span> + currentYear;            <span class="hljs-type">HttpRequest</span> <span class="hljs-variable">get</span> <span class="hljs-operator">=</span> HttpUtil.createGet(url);            <span class="hljs-type">HttpResponse</span> <span class="hljs-variable">execute</span> <span class="hljs-operator">=</span> get.execute();            <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> execute.body();            <span class="hljs-keyword">if</span> (StrUtil.isNotEmpty(s)) &#123;                <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> JSONUtil.parseObj(s);                <span class="hljs-type">Object</span> <span class="hljs-variable">holiday</span> <span class="hljs-operator">=</span> jsonObject.get(<span class="hljs-string">&quot;holiday&quot;</span>);                <span class="hljs-type">JSONObject</span> <span class="hljs-variable">holidayJsonObj</span> <span class="hljs-operator">=</span> JSONUtil.parseObj(holiday);                Set&lt;String&gt; allHolidayDate = holidayJsonObj.keySet();                log.info(<span class="hljs-string">&quot;getCurrentDataIsHoliday-&#123;&#125;&quot;</span>, allHolidayDate);                <span class="hljs-keyword">if</span> (ObjectUtil.isNotEmpty(allHolidayDate) &amp;&amp; allHolidayDate.contains(currentDate)) &#123;                    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;                &#125; <span class="hljs-keyword">else</span> &#123;                    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;                &#125;            &#125;            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;        &#125;        <span class="hljs-meta">@GetMapping(&quot;/random&quot;)</span>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">random</span><span class="hljs-params">()</span> &#123;            log.info(RandomUtil.randomInt() + <span class="hljs-string">&quot;&quot;</span>);            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;1.0_&quot;</span> + IdUtil.fastSimpleUUID();        &#125;        <span class="hljs-meta">@GetMapping(&quot;/errorlog&quot;)</span>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">errorlog</span><span class="hljs-params">()</span> &#123;            log.info(<span class="hljs-string">&quot;我测一下&quot;</span>);            <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> / <span class="hljs-number">0</span>;            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;1.0_&quot;</span> + IdUtil.fastSimpleUUID();        &#125;        <span class="hljs-meta">@GetMapping(&quot;/test2&quot;)</span>        <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getCurrentDataIsHoliday2</span><span class="hljs-params">()</span> &#123;            <span class="hljs-type">String</span> <span class="hljs-variable">currentYear</span> <span class="hljs-operator">=</span> DateUtil.format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(), <span class="hljs-string">&quot;yyyy&quot;</span>);            <span class="hljs-type">String</span> <span class="hljs-variable">currentDate</span> <span class="hljs-operator">=</span> DateUtil.format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(), <span class="hljs-string">&quot;MM-dd&quot;</span>);            log.info(<span class="hljs-string">&quot;getCurrentDataIsHoliday-&#123;&#125;----&#123;&#125;&quot;</span>, currentYear, currentDate);            <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://timor.tech/api/holiday/year/&quot;</span> + currentYear;            <span class="hljs-type">HttpRequest</span> <span class="hljs-variable">get</span> <span class="hljs-operator">=</span> HttpUtil.createGet(url);            <span class="hljs-type">HttpResponse</span> <span class="hljs-variable">execute</span> <span class="hljs-operator">=</span> get.execute();            <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> execute.body();            <span class="hljs-keyword">if</span> (StrUtil.isNotEmpty(s)) &#123;                <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> JSONUtil.parseObj(s);                <span class="hljs-type">Object</span> <span class="hljs-variable">holiday</span> <span class="hljs-operator">=</span> jsonObject.get(<span class="hljs-string">&quot;holiday&quot;</span>);                <span class="hljs-type">JSONObject</span> <span class="hljs-variable">holidayJsonObj</span> <span class="hljs-operator">=</span> JSONUtil.parseObj(holiday);                Set&lt;String&gt; allHolidayDate = holidayJsonObj.keySet();                log.info(<span class="hljs-string">&quot;getCurrentDataIsHoliday-&#123;&#125;&quot;</span>, allHolidayDate);                <span class="hljs-keyword">if</span> (ObjectUtil.isNotEmpty(allHolidayDate) &amp;&amp; allHolidayDate.contains(currentDate)) &#123;                    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;                        &#125; <span class="hljs-keyword">else</span> &#123;                        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;                        &#125;                        &#125;                        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;                        &#125;                        &#125;</code></pre></div><h2 id="7、检验结果"><a href="#7、检验结果" class="headerlink" title="7、检验结果"></a>7、检验结果</h2><p><img src="http://lensman-oss.oss-cn-shanghai.aliyuncs.com/blog-images/FmvNMTKR5417dVmMEK6YRc7fVP6Q.png"><br><img src="http://lensman-oss.oss-cn-shanghai.aliyuncs.com/blog-images/FvzvNkTRDtZ_8IC3nFdkedsIB6CE.png"><br><img src="https://lensman-oss.oss-cn-shanghai.aliyuncs.com/blog-images/FrOSB6tYoZM2QkXNcZ8wFhaoG65-.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker——Nacos（单机）</title>
    <link href="/2023/03/03/oeaziez1mwb4q3so/"/>
    <url>/2023/03/03/oeaziez1mwb4q3so/</url>
    
    <content type="html"><![CDATA[<h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><blockquote><p>快速启动一个注册中心在本地</p></blockquote><h2 id="单机-Nacos-镜像"><a href="#单机-Nacos-镜像" class="headerlink" title="单机 Nacos 镜像"></a>单机 Nacos 镜像</h2><div class="code-wrapper"><pre><code class="hljs shell">docker run --name nacos-standalone -e MODE=standalone -d -p 8848:8848 -p 9848:9848 -p 9849:9849 nacos/nacos-server:2.0.0</code></pre></div><h2 id="单机-Nacos-镜像-Mysql-启动"><a href="#单机-Nacos-镜像-Mysql-启动" class="headerlink" title="单机 Nacos 镜像-Mysql 启动"></a>单机 Nacos 镜像-Mysql 启动</h2><p><strong>参考：</strong></p><blockquote><p>注意，这里面会用到.env 这个环境变量，记得自己更改一下</p></blockquote><p><a href="https://blog.csdn.net/weixin_42542222/article/details/118354530">nacos 部署 docker-compose + mysql 模式<em>JJH</em>的博客-CSDN 博客</a><br><strong>参考：</strong><br><a href="https://github.com/alibaba/nacos/blob/develop/distribution/conf/mysql-schema.sql">nacos/mysql-schema.sql at develop · alibaba/nacos</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker——Redis（单机）</title>
    <link href="/2023/03/03/wxdfug2q1080b5c8/"/>
    <url>/2023/03/03/wxdfug2q1080b5c8/</url>
    
    <content type="html"><![CDATA[<h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><blockquote><p>跑起来一个单体的 Redis 容器</p></blockquote><h2 id="单机-Redis-镜像"><a href="#单机-Redis-镜像" class="headerlink" title="单机 Redis 镜像"></a>单机 Redis 镜像</h2><div class="code-wrapper"><pre><code class="hljs shell">docker run -itd --name redis -p 6379:6379 redis --requirepass &#x27;521521&#x27;</code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker——Mysql（单机）</title>
    <link href="/2023/03/03/uwuvbm7fcx5ohkt0/"/>
    <url>/2023/03/03/uwuvbm7fcx5ohkt0/</url>
    
    <content type="html"><![CDATA[<h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><blockquote><p>快速跑起来一个 Mysql 的镜像</p></blockquote><h2 id="单机-Mysql-镜像"><a href="#单机-Mysql-镜像" class="headerlink" title="单机 Mysql 镜像"></a>单机 Mysql 镜像</h2><ol><li>5.7 版本</li></ol><div class="code-wrapper"><pre><code class="hljs shell">docker run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=521521 --name mysql -v /app/docker/mysql/my.cnf:/etc/mysql/my.cnf -v /app/docker/mysql/db:/var/lib/mysql mysql:5.7</code></pre></div><ol start="2"><li>8.0 版本</li></ol><div class="code-wrapper"><pre><code class="hljs shell">docker run -it -d --name mysql --net=host -m 500m -v /root/mysql/data:/var/lib/mysql -v /root/mysql/config:/etc/mysql/conf.d  -e MYSQL_ROOT_PASSWORD=abc123456 -e TZ=Asia/Shanghai mysql:8.0.21 --lower_case_table_names=1</code></pre></div><p>还需要进入到容器更改是否可以远程连接</p><div class="code-wrapper"><pre><code class="hljs shell">docker exec -it mysql bash</code></pre></div><p>还需要更改对应用户的链接</p><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">允许远程连接</span>ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;abc123456&#x27;;<span class="hljs-meta prompt_">#</span><span class="language-bash">刷新数据库</span>flush privileges;</code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker基础命令</title>
    <link href="/2023/03/03/ada1oluaseecquo4/"/>
    <url>/2023/03/03/ada1oluaseecquo4/</url>
    
    <content type="html"><![CDATA[<h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><blockquote><p>经常要找一些 Docekr 的基础命令，这里面作一个总结</p></blockquote><h2 id="项目目标"><a href="#项目目标" class="headerlink" title="项目目标"></a>项目目标</h2><blockquote><p>了解&amp;熟悉 Docker 的一些命令</p></blockquote><h2 id="具体细节"><a href="#具体细节" class="headerlink" title="具体细节"></a>具体细节</h2><ol><li>查看当前 docker 有多少镜像</li></ol><div class="code-wrapper"><pre><code class="hljs shell">docker images</code></pre></div><ol start="2"><li>查看当前服务有多少容器</li></ol><div class="code-wrapper"><pre><code class="hljs shell">docker ps -a</code></pre></div><ol start="3"><li>docker 容器启动</li></ol><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">举个例子</span>docker run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=521521 --name mysql -v /app/docker/mysql/my.cnf:/etc/mysql/my.cnf -v /app/docker/mysql/db:/var/lib/mysql mysql:5.7</code></pre></div><ol start="4"><li>进入容器内部</li></ol><div class="code-wrapper"><pre><code class="hljs shell">docker exec -it [xxxx容器] bash</code></pre></div><ol start="5"><li>将宿主机的文件拷贝进入容器</li></ol><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">docker <span class="hljs-built_in">cp</span> 本地文件路径 容器ID/容器NAME:容器内路径</span>docker cp /Users/wuhanxue/Downloads/rabbitmq_delayed_message_exchange-3.9.0.ez 1faca6a70742:/opt/rabbitmq/plugins</code></pre></div><ol start="6"><li>强制移除容器</li></ol><div class="code-wrapper"><pre><code class="hljs shell">docker rm -f [xxxxx容器]</code></pre></div><ol start="7"><li>移除镜像</li></ol><div class="code-wrapper"><pre><code class="hljs shell">docker rmi [xxxxx镜像]</code></pre></div><ol start="8"><li>删除所有未运行的镜像</li></ol><div class="code-wrapper"><pre><code class="hljs shell">sudo docker rm $(sudo docker ps -a -q)</code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker&amp;Compose——安装</title>
    <link href="/2023/03/03/uq7l3qt11popnbhl/"/>
    <url>/2023/03/03/uq7l3qt11popnbhl/</url>
    
    <content type="html"><![CDATA[<h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><blockquote><p>当前每次都要上百度，阿里找对应的命令</p></blockquote><ul><li>换了新的机器就要找一次</li></ul><h2 id="项目目标"><a href="#项目目标" class="headerlink" title="项目目标"></a>项目目标</h2><blockquote><p>一键解决安装 Docker 的问题</p><ol><li>命令持久可用</li><li>全自动</li></ol></blockquote><h2 id="关键事项"><a href="#关键事项" class="headerlink" title="关键事项"></a>关键事项</h2><blockquote><p>Linux 的机器不可以是 ARM 架构的</p></blockquote><ul><li>注意 Linux 的机器的基础架构</li><li>注意 Linux 的网络速度</li></ul><h2 id="具体脚本"><a href="#具体脚本" class="headerlink" title="具体脚本"></a>具体脚本</h2><blockquote><p>下面是两种方式，具体看个人习惯</p></blockquote><p>1、脚本的具体内容可以自己复制出来新建文件</p><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">step 1: 安装必要的一些系统工具</span>sudo yum install -y yum-utils device-mapper-persistent-data lvm2<span class="hljs-meta prompt_"># </span><span class="language-bash">Step 2: 添加软件源信息</span>sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<span class="hljs-meta prompt_"># </span><span class="language-bash">Step 3: 更新并安装 Docker-CE</span>sudo yum makecache fastsudo yum -y install docker-ce<span class="hljs-meta prompt_"># </span><span class="language-bash">Step 4: 开启Docker服务</span>sudo service docker startcurl -L https://get.daocloud.io/docker/compose/releases/download/v2.2.2/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-composechmod +x /usr/local/bin/docker-compose</code></pre></div><p>2、脚本文件可直接下载使用<br><a href="https://www.yuque.com/attachments/yuque/0/2023/sh/3009901/1677819222963-3b77a451-0c55-4a77-a4b9-19594c29ff66.sh">add-docker-and-compose.sh</a></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ol><li>上传脚本</li><li>赋权脚本</li></ol><div class="code-wrapper"><pre><code class="hljs shell">chmod -R 777 脚本.sh</code></pre></div><ol start="3"><li>运行脚本</li></ol><p><img src="http://lensman-oss.oss-cn-shanghai.aliyuncs.com/blog-images/FqlcZMnI8p2d305xycDcrbDfrI5l.png"></p><h2 id="检验结果"><a href="#检验结果" class="headerlink" title="检验结果"></a>检验结果</h2><div class="code-wrapper"><pre><code class="hljs shell">docker -vdocker-compose -v</code></pre></div><p><img src="https://lensman-oss.oss-cn-shanghai.aliyuncs.com/blog-images/FoJvzsezXvQv3VTmfuVYbiUP4V8u.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
